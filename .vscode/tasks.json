// See https://go.microsoft.com/fwlink/?LinkId=733558
// for the documentation about the tasks.json format
{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Dev: Package & Launch",
      "type": "shell",
      "command": "#!/bin/bash\nset -e\n\n# Compile the extension\necho \"🔨 Compiling extension...\"\npnpm run compile\n\n# Get current version and create dev version\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\nDEV_VERSION=\"${CURRENT_VERSION}-dev\"\necho \"📦 Creating dev package with version: $DEV_VERSION\"\n\n# Temporarily update version for dev build\nnpm version $DEV_VERSION --no-git-tag-version\n\n# Package the extension\necho \"📦 Packaging extension...\"\npnpm run package\n\n# Restore original version\nnpm version $CURRENT_VERSION --no-git-tag-version\n\n# Install the dev VSIX in VS Code Insiders\nDEV_VSIX=\"synthwave-liquid-glass-${DEV_VERSION}.vsix\"\necho \"🚀 Installing dev extension: $DEV_VSIX\"\ncode-insiders --install-extension \"$DEV_VSIX\" --force\n\n# Launch dev environment\necho \"🎉 Launching VS Code Insiders development environment...\"\npnpm run dev",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "showReuseMessage": false
      },
      "problemMatcher": []
    },
    {
      "label": "Dev: Watch & Auto-Reload",
      "type": "shell",
      "command": "#!/bin/bash\nset -e\n\n# Create a temporary script for the rebuild process\ncat > /tmp/rebuild_extension.sh << 'REBUILD_SCRIPT'\n#!/bin/bash\nset -e\n\necho \"🔄 Changes detected, rebuilding extension...\"\n\n# Compile the extension\necho \"🔨 Compiling extension...\"\npnpm run compile\n\n# Get current version and create dev version\nCURRENT_VERSION=$(node -p \"require('./package.json').version\")\nDEV_VERSION=\"${CURRENT_VERSION}-dev\"\necho \"📦 Creating dev package with version: $DEV_VERSION\"\n\n# Temporarily update version for dev build\nnpm version $DEV_VERSION --no-git-tag-version\n\n# Package the extension\necho \"📦 Packaging extension...\"\npnpm run package\n\n# Restore original version\nnpm version $CURRENT_VERSION --no-git-tag-version\n\n# Install the dev VSIX in VS Code Insiders\nDEV_VSIX=\"synthwave-liquid-glass-${DEV_VERSION}.vsix\"\necho \"🚀 Installing dev extension: $DEV_VSIX\"\ncode-insiders --install-extension \"$DEV_VSIX\" --force\n\necho \"✅ Extension reloaded! Restart VS Code Insiders to see changes.\"\nREBUILD_SCRIPT\n\nchmod +x /tmp/rebuild_extension.sh\n\n# Run initial build\necho \"🎬 Starting watch mode for extension development...\"\n/tmp/rebuild_extension.sh\n\n# Launch dev environment (only once)\necho \"🎉 Launching VS Code Insiders development environment...\"\npnpm run dev &\nDEV_PID=$!\n\n# Watch for changes using Node.js and chokidar\nnode -e \"\nconst chokidar = require('chokidar');\nconst { exec } = require('child_process');\nconst path = require('path');\n\nconsole.log('👀 Watching for changes in src/, themes/, package.json...');\n\nconst watcher = chokidar.watch([\n  'src/**/*',\n  'themes/**/*',\n  'package.json'\n], {\n  ignoreInitial: true,\n  ignored: ['**/node_modules/**', '**/dist/**', '**/.git/**']\n});\n\nlet timeout;\nwatcher.on('all', (event, filePath) => {\n  console.log(\\`📁 File \\${event}: \\${filePath}\\`);\n  \n  // Debounce rapid changes\n  clearTimeout(timeout);\n  timeout = setTimeout(() => {\n    console.log('🔄 Running dev rebuild process...');\n    exec('/tmp/rebuild_extension.sh', { cwd: process.cwd() }, (error, stdout, stderr) => {\n      if (error) {\n        console.error('❌ Error during rebuild:', error);\n        return;\n      }\n      console.log(stdout);\n      if (stderr) console.error(stderr);\n    });\n  }, 500);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('\\\\n🛑 Stopping watch mode...');\n  watcher.close();\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.log('\\\\n🛑 Stopping watch mode...');\n  watcher.close();\n  process.exit(0);\n});\n\"",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "isBackground": true,
      "presentation": {
        "reveal": "always",
        "panel": "new",
        "showReuseMessage": false
      },
      "problemMatcher": []
    }
  ]
}
